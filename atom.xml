<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Noteligible&#39; Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-19T16:43:11.958Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Noteligible</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis 概述</title>
    <link href="http://yoursite.com/2019/06/19/MyBatis%20%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2019/06/19/MyBatis 概述/</id>
    <published>2019-06-19T01:24:45.000Z</published>
    <updated>2019-06-19T16:43:11.958Z</updated>
    
    <content type="html"><![CDATA[<p>本文对 MyBatis 做一个简单介绍，包括框架原理，执行过程，DAO开发方法，输入输出映射及动态sql。</p><h2 id="MyBatis介绍"><a href="#MyBatis介绍" class="headerlink" title="MyBatis介绍"></a>MyBatis介绍</h2><p>MyBatis 原本是 apache 的一个开源项目 iBatis, 2010年这个项目由 apache software foundation 迁移到了 google code，并且改名为MyBatis。2013年11月迁移到 Github下（<a href="https://github.com/mybatis/mybatis-3/releases）。" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases）。</a></p><p>MyBatis 是一个优秀的持久层框架，它对 JDBC 的操作数据库的过程进行封装，使开发者只需要关注 sql 本身，而不需要花费精力去处理例如注册驱动、创建 connection、创建 statement、手动设置参数、结果集检索等 JDBC 繁杂的过程代码。</p><p>Mybatis 通过 xml 或 注解 的方式将要执行的各种 statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过 java 对象和 statement中 的 sql 进行映射生成最终执行的 sql 语句，最后由 MyBatis 框架执行 sql 并将结果集映射成 Java 对象并返回。</p><h2 id="MyBatis-架构"><a href="#MyBatis-架构" class="headerlink" title="MyBatis 架构"></a>MyBatis 架构</h2><p>1、MyBatis 配置文件。</p><p>SqlMapConfig.xml：此文件作为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息。</p><p>mapper.xml：sql映射文件，配置了操作数据库的 sql 语句，此文件需要在 SqlMapConfig.xml 中加载。</p><p>2、通过 MyBatis 环境等配置信息构造 SqlSessionFactory（会话工厂）。</p><p>3、由会话工厂创建 SqlSession（会话），操作数据库需要通过 SqlSession 进行。</p><p>4、MyBatis 底层自定义了 Executor 执行器接口操作数据库，Executor 接口有两个实现，一个是基本执行器、一个是缓存执行器。</p><p>5、Mapped Statement 也是 MyBatis 一个底层封装对象，它包装了 MyBatis 配置信息及 sql 映射信息等，mapper.xml 文件中一个 sql 对应一个 Mapped Statement 对象，sql 的 id 即是 Mapped statement 的 id。</p><p>6、Mapped Statement 对 sql 执行输入参数进行定义，包括 HashMap、基本类型、pojo，Executor 通过 Mapped Statement 在执行 sql 前将输入的 Java 对象映射至 sql 中，输入参数映射就是 JDBC 编程中对 preparedStatement 设置参数。</p><p>7、Mapped Statement 对 sql 执行输出结果进行定义，包括 HashMap、基本类型、pojo，Executor 通过 Mapped Statement 在执行 sql 后将输出结果映射至 Java 对象中，输出结果映射过程相当于 JDBC 编程中对结果的解析处理过程。</p><p>三、MyBatis 运行过程<br>1、配置 MyBatis 的配置文件：mybatis-config.xml（名称不固定）。</p><p>2、通过配置文件，加载 MyBatis 运行环境，创建 SqlSessionFactory 会话工厂（SqlSessionFactory 在实际使用时按单例方式）。</p><p>3、通过 SqlSessionFactory 创建 SqlSession。SqlSession 是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议 SqlSession 的应用场合在方法体内。</p><p>4、调用 SqlSession 的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法。</p><p>5、释放资源，关闭 SqlSession。</p><h2 id="MyBatis-开发-DAO-的方法"><a href="#MyBatis-开发-DAO-的方法" class="headerlink" title="MyBatis 开发 DAO 的方法"></a>MyBatis 开发 DAO 的方法</h2><p>使用 MyBatis 开发 Dao 通常有两个方法：原始 Dao 、Mapper 动态代理开发（官方推荐）。</p><h4 id="原始-DAO"><a href="#原始-DAO" class="headerlink" title="原始 DAO"></a>原始 DAO</h4><p>需要程序员编写 DAO 接口及其实现类；</p><p>需要在 DAO 接口的实现类上注入 sqlSessionFactory，创建 sqlSessionFactory 时需要读取 mapper.xml 到内存；</p><p>通过创建 sqlSession 对象来调用 mapper 中的 sql 语句，在操作结束后需要手工进行提交，释放资源，返回结果；</p><p>存在的问题：</p><ul><li>Dao 实现类方法体中存在重复代码：通过 SqlSessionFactory 创建 SqlSession，调用 SqlSession 的数据库操作方法；</li><li>调用 sqlSession 的数据库操作方法需要指定 statement 的 id，这里存在硬编码，不得于开发维护；</li><li>调用 sqlsession 方法时传入的变量，由于 sqlsession 方法使用泛型，即使变量类型传入错误，在编译阶段也不报错，不利于程序员开发。</li></ul><h4 id="Mapper-动态代理开发"><a href="#Mapper-动态代理开发" class="headerlink" title="Mapper 动态代理开发"></a>Mapper 动态代理开发</h4><p>只需要程序员编写 mapper 接口（就是 dao 接口）；</p><p>在编写 mapper.xml（映射文件）和相应的 mapper.java 时需要遵循一个开发规范：</p><ul><li>mapper.xml 中namespace 就是 mapper.java 的类全路径；</li><li>mapper.xml 中statement 的 id 和mapper.java 中方法名一致；</li><li>mapper.xml 中statement 的 parameterType 指定输入参数的类型和 mapper.java 的方法输入参数类型一致；</li><li>mapper.xml 中 statement 的 resultType 指定输出结果的类型和 mapper.java 的方法返回值类型一致。</li></ul><h2 id="输入映射和输出映射"><a href="#输入映射和输出映射" class="headerlink" title="输入映射和输出映射"></a>输入映射和输出映射</h2><h4 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h4><p>parameterType：指定输入参数类型，可以为简单类型、pojo、hashmap。</p><p>MyBatis 通过 OGNL 从输入对象中获取参数值拼接在 sql 中。</p><p>对于综合查询，建议 parameterType 使用包装的 pojo，有利于系统扩展。</p><h4 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h4><p>MyBatis 将 sql 查询结果的一行记录数据映射为 pojo 对象（一对一），如果有多条数据则分别进行映射，并把对象放到容器 List 中（一对多）。</p><p>resultType：查询到的列名和映射的 pojo 的属性名一致时才能映射成功。</p><p>reusltMap：如果查询到的列名和映射的 pojo 的属性名不一致时，通过 resultMap 设置列名和属性名之间的映射关系，可以完成映射。</p><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><p>if判断</p><p>where</p><p>foreach</p><p>sql片段</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文对 MyBatis 做一个简单介绍，包括框架原理，执行过程，DAO开发方法，输入输出映射及动态sql。&lt;/p&gt;
&lt;h2 id=&quot;MyBatis介绍&quot;&gt;&lt;a href=&quot;#MyBatis介绍&quot; class=&quot;headerlink&quot; title=&quot;MyBatis介绍&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>原生 JDBC 编程的问题总结</title>
    <link href="http://yoursite.com/2019/06/19/%E5%8E%9F%E7%94%9F%20JDBC%20%E7%BC%96%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/19/原生 JDBC 编程的问题总结/</id>
    <published>2019-06-19T01:13:54.784Z</published>
    <updated>2019-06-19T16:22:06.307Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结原生 JDBC 编程的一般步骤，总结其存在的问题，并附上典型 JDBC 示例。</p><h2 id="原生-JDBC-开发步骤"><a href="#原生-JDBC-开发步骤" class="headerlink" title="原生 JDBC 开发步骤"></a>原生 JDBC 开发步骤</h2><ol><li>加载数据库驱动</li><li>创建并获取数据库链接</li><li>创建 jdbc statement 对象</li><li>设置sql语句</li><li>设置sql语句中的参数（使用 preparedStatement）</li><li>通过 statement 执行 sql 并获取结果</li><li>对 sql 执行结果进行解析处理</li><li>释放资源（resultSet、preparedstatement、connection）</li></ol><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class JdbcTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //数据库连接</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        //预编译的Statement，使用预编译的Statement提高数据库性能</span><br><span class="line">        PreparedStatement preparedStatement = null;</span><br><span class="line">        //结果集</span><br><span class="line">        ResultSet resultSet = null;</span><br><span class="line"> </span><br><span class="line">        try &#123;</span><br><span class="line">            // 加载数据库驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            // 数据库连接地址</span><br><span class="line">            String URL = &quot;jdbc:mysql://localhost:3306/demo? serverTimezone=GMT&quot;;</span><br><span class="line">            // 用户名</span><br><span class="line">            String USER = &quot;root&quot;;</span><br><span class="line">            // 密码</span><br><span class="line">            String PASSWORD = &quot;root&quot;;</span><br><span class="line">            // 通过驱动管理类获取数据库链接</span><br><span class="line">            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);            </span><br><span class="line">            // 定义sql语句，&quot;?&quot;表示占位符</span><br><span class="line">            String sql = &quot;select * from users where name = ?&quot;;</span><br><span class="line">            // 获取预处理 statement</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql); </span><br><span class="line">            // 设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span><br><span class="line">            preparedStatement.setString(1, &quot;张三&quot;);</span><br><span class="line">            // 向数据库发出sql执行查询，查询出结果集</span><br><span class="line">            resultSet = preparedStatement.executeQuery(); </span><br><span class="line">            // 遍历查询结果集</span><br><span class="line">            while (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(resultSet.getString(&quot;id&quot;) + &quot;  &quot; + resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 释放资源</span><br><span class="line">            if (resultSet != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (preparedStatement != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><ol><li><p>数据库连接时，使用时就创建，不使用时就立即释放，对数据库进行频繁地连接和释放，造成数据库资源浪费，从而影响数据库性能。</p><p>解决方法：使用数据库连接池管理数据库连接。</p></li><li><p>将 sql 语句写在 Java 代码中，存在硬编码，如果 sql 语句修改，则需要重新编译 Java 代码，不利于系统维护。</p><p>解决方法：将 sql 语句配置在 xml 配置文件中。</p></li><li><p>使用 preparedStatement 中向占位符号传参数值时，Java 代码中存在硬编码，不利于系统维护。</p><p>解决方法：将 sql 语句及占位符号和参数全部配置在 xml 配置文件中。</p></li><li><p>对结果集解析麻烦，sql 变化导致解析代码变化，且解析前需要遍历，存在硬编码，不利于系统维护。</p><p>将查询的结果集，自动映射成 Java 对象。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文总结原生 JDBC 编程的一般步骤，总结其存在的问题，并附上典型 JDBC 示例。&lt;/p&gt;
&lt;h2 id=&quot;原生-JDBC-开发步骤&quot;&gt;&lt;a href=&quot;#原生-JDBC-开发步骤&quot; class=&quot;headerlink&quot; title=&quot;原生 JDBC 开发步骤&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Web开发" scheme="http://yoursite.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
      <category term="JDBC" scheme="http://yoursite.com/tags/JDBC/"/>
    
  </entry>
  
</feed>
